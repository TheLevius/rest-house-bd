generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model BookingRequest {
  id             BigInt       @id @default(autoincrement())
  buildingTypeId Int          @db.SmallInt
  userId         String?      @db.Uuid
  phone          String       @db.VarChar(255)
  email          String       @db.VarChar(255)
  checkInDate    DateTime     @db.Timestamptz(6)
  checkOutDate   DateTime     @db.Timestamptz(6)
  adultsCount    Int          @db.SmallInt
  childrenCount  Int          @default(0) @db.SmallInt
  childrenAges   Int[]        @db.SmallInt
  message        String?      @db.VarChar(4096)
  createdAt      DateTime     @default(now()) @db.Timestamptz(6)
  updatedAt      DateTime     @updatedAt() @db.Timestamptz(6)
  buildingTypes  BuildingType @relation(fields: [buildingTypeId], references: [id])
  users          User?        @relation(fields: [userId], references: [id], onDelete: Restrict)
}

model BuildingType {
  id              Int              @id @db.SmallInt
  type            String           @unique @db.VarChar(255)
  createdAt       DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt       DateTime         @updatedAt() @db.Timestamptz(6)
  bookingRequests BookingRequest[]
  rooms           Room[]
}

model Comment {
  id         String   @id @default(uuid()) @db.Uuid()
  title      String   @db.VarChar(255)
  content    String?  @db.VarChar(4095)
  rate       Int      @db.SmallInt
  stayStart  DateTime @db.Timestamptz(6)
  stayEnd    DateTime @db.Timestamptz(6)
  guestName  String   @db.VarChar(255)
  avatarLink String?  @db.VarChar(255)
  createdAt  DateTime @default(now()) @db.Timestamptz(6)
  updatedAt  DateTime @updatedAt() @db.Timestamptz(6)
}

model Condition {
  id        Int      @id
  value     String   @unique @db.VarChar(255)
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt() @db.Timestamptz(6)
  rooms     Room[]
}

model Role {
  id        Int        @id @default(autoincrement())
  role      String     @db.VarChar(255)
  createdAt DateTime   @default(now()) @db.Timestamptz(6)
  updatedAt DateTime   @updatedAt() @db.Timestamptz(6)
  userRoles UserRole[]
}

model RoomOccupiedPeriod {
  id           BigInt    @id @default(autoincrement())
  roomId       String    @db.Uuid
  checkInDate  DateTime  @db.Timestamptz(6)
  checkOutDate DateTime? @db.Timestamptz(6)
  createdAt    DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt    DateTime  @updatedAt() @db.Timestamptz(6)
  rooms        Room      @relation(fields: [roomId], references: [id])
}

model Room {
  id                  String               @id @default(uuid()) @db.Uuid()
  buildingTypeId      Int                  @db.SmallInt
  number              Int
  roomCount           Int
  availability        String               @db.VarChar
  conditionId         Int
  createdAt           DateTime             @default(now()) @db.Timestamptz(6)
  updatedAt           DateTime             @updatedAt() @db.Timestamptz(6)
  roomOccupiedPeriods RoomOccupiedPeriod[]
  buildingTypes       BuildingType         @relation(fields: [buildingTypeId], references: [id])
  conditions          Condition            @relation(fields: [conditionId], references: [id])

  @@unique([number, buildingTypeId], map: "separateHotelAndCottages")
}

model Session {
  id           String   @id @default(uuid()) @db.Uuid()
  userId       String   @db.Uuid
  sessionToken String   @db.VarChar(255)
  expires      DateTime @db.Timestamptz(6)
  createdAt    DateTime @default(now()) @db.Timestamptz(6)
  updatedAt    DateTime @updatedAt() @db.Timestamptz(6)
  users        User     @relation(fields: [userId], references: [id])
}

model UserRole {
  id        String   @id @default(uuid()) @db.Uuid()
  userId    String   @db.Uuid
  roleId    Int      @default(autoincrement())
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)
  roles     Role     @relation(fields: [roleId], references: [id])
  users     User     @relation(fields: [userId], references: [id])
}

model User {
  id              String           @id @default(uuid()) @db.Uuid()
  email           String           @unique @db.VarChar(255)
  password        String           @db.VarChar(255)
  createdAt       DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt       DateTime         @updatedAt() @db.Timestamptz(6)
  login           String?          @db.VarChar(255)
  bookingRequests BookingRequest[]
  sessions        Session[]
  userRoles       UserRole[]
}
